@mixin css3-prefix($prop, $value) {
    -webkit-#{$prop}: #{$value};
    -moz-#{$prop}: #{$value};
    -ms-#{$prop}: #{$value};
    -o-#{$prop}: #{$value};
    #{$prop}: #{$value};
}

/**
* Clearfix
*
* Resets layout after using floats
*/

@mixin clearfix {
    &::after {
        clear: both;
        content: '';
        display: table;
    }
}

/**
* Visually Hidden
*
* Visually hides text while maintaining screen reader support.
*/

@mixin visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;

    // sass-lint:disable no-important
    position: absolute;
    width: 1px;
    word-wrap: normal !important;
}

@mixin hide {
    display: none !important;
}


@mixin push-auto {
    margin: {
        left: auto;
        right: auto;
    }
}


@mixin max-width($width) {
    @include push-auto;
    max-width: rem($width);
}



/**
* List Zero
*
* Removing styles from a list.
*/

@mixin list-zero {
    list-style-type: none;
    margin: 0;
    padding: 0;
}

/**
* Breakpoint
*
* Supports applying breakpoint specific styles.
* References the values set in the $breakpoints map in _includes/_variables.
*/

@mixin breakpoint($point) {
    @if $point == fullup {
        @media (min-width: #{map-get($breakpoints, full)}px) {
            @content;
        }
    } @else if $point == full {
        @media (max-width: #{map-get($breakpoints, full)}px) {
            @content;
        }
    } @else if $point == desktop {
        @media (max-width: #{map-get($breakpoints, desktop)}px) {
            @content;
        }
    } @else if $point == desktopup {
        @media (min-width: #{map-get($breakpoints, desktop)}px) {
            @content;
        }
    } @else if $point == tablet {
        @media (max-width: #{map-get($breakpoints, tablet)}px) {
            @content;
        }
    } @else if $point == tabletup {
        @media (min-width: #{map-get($breakpoints, tablet)}px) {
            @content;
        }
    } @else if $point == phone {
        @media (max-width: #{map-get($breakpoints, phone)}px) {
            @content;
        }
    } @else if $point == phoneup {
        @media (min-width: #{map-get($breakpoints, phone)}px) {
            @content;
        }
    } @else if $point == smartphone {
        @media (max-width: #{map-get($breakpoints, smart-phone)}px) {
            @content;
        }
    } @else if $point == smartphoneup {
        @media (min-width: #{map-get($breakpoints, phone-min)}px) {
            @content;
        }
    }
}

@mixin abs($top: 0, $right: 0, $bottom: 0, $left: 0) {
  bottom: $bottom;
  left: $left;
  position: absolute;
  right: $right;
  top: $top;
}

@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;

  @if $horizontal and $vertical {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $horizontal {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if $vertical {
    top: 50%;
    transform: translate(0, -50%);
  }
}


@mixin border($direction, $width, $style, $color) {
    border-#{$direction}: $width $style $color;
}


@mixin arrow($direction: down, $size: 5px, $color: #555) {
    height: 0;
    width: 0;

    @if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    } @else if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
    } @else {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    }
}